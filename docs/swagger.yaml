openapi: 3.0.0
info:
  title: UnaHur Anti-Social Net API
  description: API para la red social Anti-Social Net, desarrollada como parte de un trabajo práctico.
  version: 1.0.0
  contact:
    name: Semaforo En Rojo
    email: contacto@unahur.edu.ar

servers:
  - url: http://localhost:3000
    description: Servidor local de desarrollo

tags:
  - name: Users
    description: Usuarios
  - name: Posts
    description: Publicaciones
  - name: Comments
    description: Comentarios
  - name: Tags
    description: Etiquetas

paths:
  /users:
    get:
      summary: Obtener todos los usuarios
      tags: [Users]
      responses:
        200:
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'

    post:
      summary: Crear un nuevo usuario
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        201:
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

  /users/nickname:
    get:
      summary: Obtener un usuario por nickname
      tags: [Users]
      parameters:
        - in: path
          name: nickname
          required: true
          schema:
            type: string
      responses:
        200:
          description: Datos del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

    put:
      summary: Actualizar un usuario por nickName
      tags: [Users]
      parameters:
        - in: path
          name: nickname
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        200:
          description: Usuario actualizado

    delete:
      summary: Eliminar un usuario
      tags: [Users]
      parameters:
        - in: path
          name: nickname
          required: true
          schema:
            type: string
      responses:
        204:
          description: Usuario eliminado

  /posts:
    get:
      summary: Obtener todas las publicaciones
      tags: [Posts]
      responses:
        200:
          description: Lista de posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'

    post:
      summary: Crear un nuevo post
      tags: [Posts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post'
      responses:
        201:
          description: Post creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
  /posts/{id}:
    put:
      summary: Actualizar una publicacion por ID
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Publicacion actualizada exitosamente
        '500':
          description: Error interno del servidor
    delete:
      summary: Eliminar una publicacion por ID
      description: Elimina una publicacion y todos sus recursos
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Publicacion eliminada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Publicacion eliminada exitosamente"
        '500':
          description: Error interno del servidor
  /posts/{id}/images/{idImage}:
    delete:
      summary: Eliminar una imagen especi­fica de un post
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del post
        - name: idImage
          in: path
          required: true
          schema:
            type: integer
          description: ID de la imagen a eliminar
      responses:
        '200':
          description: Imagen eliminada exitosamente
        '500':
          description: Error al eliminar la imagen

    put:
      summary: Actualizar una publicacion con imagenes
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Contenido actualizado del post
                imagenes:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Nuevas imagenes para agregar al post
      responses:
        '200':
          description: Publicacion actualizada exitosamente
        '500':
          description: Error al actualizar la publicacion
  /comments:
    get:
      summary: Obtener todos los comentarios
      tags:
        - Comments
      responses:
        '200':
          description: Lista de comentarios
        '500':
          description: Error interno del servidor

    post:
      summary: Agregar un comentario
      tags: [Comments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
      responses:
        201:
          description: Comentario agregado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
  /comments/{id}:
    put:
      summary: Actualizar un comentario por ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
      responses:
        '201':
          description: Comentario actualizado exitosamente
        '500':
          description: Error interno del servidor
    delete:
      summary: Eliminar un comentario por ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Comentario eliminado exitosamente
        '500':
          description: Error interno del servidor
  /tags:
    get:
      summary: Obtener todas las etiquetas
      tags: [Tags]
      responses:
        200:
          description: Lista de etiquetas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tag'

    post:
      summary: Crear una nueva etiqueta
      tags: [Tags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tag'
      responses:
        201:
          description: Etiqueta creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
  /tags/{id}:
    put:
      summary: Actualizar una etiqueta por ID
      tags:
        - Tags
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la etiqueta a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: Etiqueta actualizada exitosamente
        '500':
          description: Error interno del servidor
    delete:
      summary: Eliminar una etiqueta por ID
      tags:
        - Tags
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la etiqueta a eliminar
      responses:
        '500':
          description: Error interno del servidor
components:
  schemas:
    User:
      type: object
      required:
        - nickName
        - email
        - pasword
      properties:
        _id:
          type: string
        nickName:
          type: string
        email:
          type: string
        pasword:
          type: string
      example:
        _id: 60f5a1f99d1b2c001c8e4d3a
        nickName: "juan123"
        email: "juan@example.com"
        pasword: "60f5a1f99d"

    post:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
      example:
        _id: 60f5a1f99d1b2c001c8e4d3f
        userId: "60f5a1f99d1b2c001c8e4d3a"
        description: "Hoy fue un buen día."
        images: ["http://localhost:3000/images/img1.jpg"]
        tags: ["feliz", "sol"]
        createdAt: "2023-11-01T10:30:00Z"

    post:
      type: object
      required:
        - userId
        - description
      properties:
        userId:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string

    comment:
      type: object
      properties:
        _id:
          type: string
        postId:
          type: string
        userId:
          type: string
        content:
          type: string
        visible:
          type: boolean
        createdAt:
          type: string
          format: date-time

    comment:
      type: object
      required:
        - postId
        - userId
        - content
      properties:
        postId:
          type: string
        userId:
          type: string
        content:
          type: string

    tag:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        posts:
          type: array
          items:
            type: string

    tag:
      type: object
      required:
        - name
      properties:
        name:
          type: string